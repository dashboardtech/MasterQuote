import streamlit as st
import pandas as pd
import os
import tempfile
import logging
from datetime import datetime
import yaml
import time

# Importar configuraci√≥n
from config import API_KEYS, CONSTRUCTION_CONFIG, UI_CONFIG, CACHE_CONFIG, EXTRACTOR_CONFIG

# Importar m√≥dulos core
from modules.price_database import PriceDatabase
from modules.cotizacion_llm import CotizacionLLM
from modules.data_loader import cargar_excel, validar_formato_excel
from modules.price_updater import actualizar_precios, aplicar_ajustes
from modules.exporter import exportar_cotizacion
from modules.universal_price_extractor import UniversalPriceExtractor

# Importar nuevos m√≥dulos
from modules.security_improvements import SecretManager, APIKeyManager
from modules.async_processing import AsyncProcessor, BatchProcessor
from modules.dockling_processor import DocklingProcessor
from modules.streamlit_ui_improvements import ModernUIComponents, create_dashboard_page, create_settings_page, setup_new_quotation_page, create_budget_analysis_page
from modules.extractor_manager import ExtractorManager, extract_with_confidence, process_batch_with_validation

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Inicializar componentes
@st.cache_resource
def inicializar_secretos():
    return SecretManager()

@st.cache_resource
def inicializar_api_keys(_secret_manager):
    # Usar las claves API del archivo de configuraci√≥n
    api_key_manager = APIKeyManager(_secret_manager)
    
    # Configurar claves predeterminadas desde config.py
    if not api_key_manager.get_openai_api_key():
        api_key_manager.set_api_key("openai", API_KEYS["OPENAI_API_KEY"])
    
    if not api_key_manager.get_dockling_api_key():
        api_key_manager.set_api_key("dockling", API_KEYS["DOCKLING_API_KEY"])
    
    return api_key_manager

@st.cache_resource
def inicializar_db():
    return PriceDatabase("price_history.db")

@st.cache_resource
def inicializar_llm(_db, _api_key_manager):
    api_key = _api_key_manager.get_openai_api_key()
    return CotizacionLLM(_db, api_key=api_key)

@st.cache_resource
def inicializar_extractor(_api_key_manager):
    api_key = _api_key_manager.get_openai_api_key()
    dockling_api_key = _api_key_manager.get_dockling_api_key()
    return UniversalPriceExtractor(
        api_key=api_key, 
        dockling_api_key=dockling_api_key,
        use_cache=CACHE_CONFIG["enabled"], 
        cache_expiry_days=CACHE_CONFIG["expiration_time"] // (24 * 60 * 60)  # Convertir segundos a d√≠as
    )

@st.cache_resource
def inicializar_extractor_manager(_api_key_manager):
    api_key = _api_key_manager.get_openai_api_key()
    dockling_api_key = _api_key_manager.get_dockling_api_key()
    return ExtractorManager(
        api_key=api_key, 
        dockling_api_key=dockling_api_key,
        num_extractors=EXTRACTOR_CONFIG["num_extractors"],
        use_parallel=EXTRACTOR_CONFIG["use_parallel"]
    )

@st.cache_resource
def inicializar_async_processor():
    return AsyncProcessor()

@st.cache_resource
def inicializar_dockling(_api_key_manager):
    api_key = _api_key_manager.get_dockling_api_key()
    return DocklingProcessor(api_key=api_key)

def main():
    # Configurar p√°gina con los valores de UI_CONFIG
    st.set_page_config(
        page_title=UI_CONFIG["page_title"],
        page_icon=UI_CONFIG["page_icon"],
        layout="wide",
        initial_sidebar_state="expanded",
        menu_items=UI_CONFIG["menu_items"]
    )
    
    # Descripci√≥n de la aplicaci√≥n para documentaci√≥n
    st.markdown("""
    # MasterQuote - Sistema Inteligente de Cotizaci√≥n para Proyectos de Construcci√≥n

    ## Descripci√≥n
    MasterQuote es una herramienta integral para la generaci√≥n de cotizaciones en el sector construcci√≥n,
    que permite extraer informaci√≥n de precios desde m√∫ltiples fuentes (Excel, PDF, CSV, etc.), 
    procesar esta informaci√≥n utilizando inteligencia artificial, y generar cotizaciones 
    personalizadas seg√∫n las necesidades espec√≠ficas del usuario.

    ## Principales Funcionalidades
    1. Extracci√≥n inteligente de precios desde documentos usando IA
    2. Validaci√≥n cruzada entre m√∫ltiples extractores para garantizar precisi√≥n
    3. Categorizaci√≥n autom√°tica de items seg√∫n su relaci√≥n con la construcci√≥n
    4. Ajuste regional de precios seg√∫n localidad del proyecto
    5. Plantillas predefinidas para diferentes tipos de proyectos (edificios, obra civil, etc.)
    6. Exportaci√≥n a m√∫ltiples formatos (Excel, PDF, CSV)
    7. Hist√≥rico de precios y an√°lisis de tendencias
    8. Integraci√≥n con APIs externas (OpenAI, Dockling) para mejora continua

    Esta aplicaci√≥n facilita el proceso de cotizaci√≥n en proyectos de construcci√≥n,
    ahorrando tiempo en la recopilaci√≥n y procesamiento de informaci√≥n de precios,
    y proporcionando resultados m√°s precisos y adaptados al sector.
    """)
    
    # Aplicar tema personalizado
    theme = UI_CONFIG["theme"]
    st.markdown(f"""
        <style>
        .reportview-container .main .block-container{{
            max-width: 1200px;
            padding-top: 2rem;
            padding-right: 2rem;
            padding-left: 2rem;
            padding-bottom: 2rem;
        }}
        .stApp {{
            background-color: {theme["backgroundColor"]};
            color: {theme["textColor"]};
        }}
        .stButton>button {{
            background-color: {theme["primaryColor"]};
            color: white;
        }}
        .stTextInput, .stNumberInput, .stSelectbox, .stDateInput > div {{
            background-color: {theme["secondaryBackgroundColor"]};
            color: {theme["textColor"]};
        }}
        .sidebar .sidebar-content {{
            background-color: {theme["secondaryBackgroundColor"]};
        }}
        .stTabs [data-baseweb="tab-list"] {{
            background-color: {theme["secondaryBackgroundColor"]};
        }}
        .stTabs [data-baseweb="tab"] {{
            color: {theme["textColor"]};
        }}
        .stTabs [data-baseweb="tab-panel"] {{
            background-color: {theme["backgroundColor"]};
        }}
        .st-bb {{
            background-color: {theme["secondaryBackgroundColor"]};
        }}
        .st-at {{
            background-color: {theme["backgroundColor"]};
        }}
        .st-cc {{
            color: {theme["textColor"]};
        }}
        </style>
    """, unsafe_allow_html=True)
    
    # Inicializar componentes
    secret_manager = inicializar_secretos()
    api_key_manager = inicializar_api_keys(secret_manager)
    db = inicializar_db()
    llm = inicializar_llm(db, api_key_manager)
    extractor = inicializar_extractor(api_key_manager)
    extractor_manager = inicializar_extractor_manager(api_key_manager)
    async_processor = inicializar_async_processor()
    dockling = inicializar_dockling(api_key_manager)
    
    # Verificar y crear directorios necesarios
    for directorio in ['exports', 'templates', 'cache']:
        if not os.path.exists(directorio):
            os.makedirs(directorio)
    
    # Men√∫ principal en sidebar
    with st.sidebar:
        ModernUIComponents.custom_header(
            UI_CONFIG["page_title"].split(" - ")[0], 
            "Sistema de cotizaciones para construcci√≥n", 
            UI_CONFIG["page_icon"]
        )
        
        st.markdown("### Men√∫ Principal")
        pagina = st.radio(
            "Seleccione una secci√≥n:",
            [
                "üìù Nueva Cotizaci√≥n", 
                "üèóÔ∏è Proyectos de Construcci√≥n",
                "üìä Dashboard",
                "üìÖ Importar Precios", 
                "üìÉ Hist√≥rico de Precios", 
                "üìà An√°lisis de Presupuestos",
                "‚öôÔ∏è Configuraci√≥n"
            ]
        )
        
        # Informaci√≥n de la versi√≥n
        st.markdown("---")
        st.markdown("### Informaci√≥n del Sistema")
        st.text(f"Versi√≥n: 2.2.0")
        st.text(f"Fecha: {datetime.now().strftime('%d/%m/%Y')}")
        
        # Estado de la API
        api_key = api_key_manager.get_openai_api_key()
        api_status = "‚úÖ Configurada" if api_key else "‚ùå No configurada"
        st.text(f"API OpenAI: {api_status}")
        
        dockling_api_key = api_key_manager.get_dockling_api_key()
        dockling_status = "‚úÖ Configurada" if dockling_api_key else "‚ùå No configurada"
        st.text(f"API Dockling: {dockling_status}")
        
        # Bot√≥n para verificar actualizaciones
        if st.button("Verificar actualizaciones", key="check_updates"):
            with st.spinner("Verificando..."):
                time.sleep(1)  # Simulaci√≥n
                st.success("Sistema actualizado a la √∫ltima versi√≥n")
    
    # Renderizar la p√°gina seleccionada
    if pagina == "üìù Nueva Cotizaci√≥n":
        # Pasar la configuraci√≥n de construcci√≥n al setup_new_quotation_page
        setup_new_quotation_page(
            extractor, 
            db, 
            llm, 
            extractor_manager, 
            construction_config=CONSTRUCTION_CONFIG,
            default_min_confidence=EXTRACTOR_CONFIG["default_min_confidence"],
            validation_enabled_by_default=EXTRACTOR_CONFIG["validation_enabled_by_default"]
        )
    
    elif pagina == "üèóÔ∏è Proyectos de Construcci√≥n":
        st.title("Proyectos de Construcci√≥n")
        
        # Mostrar plantillas de proyectos
        st.header("Plantillas de Proyectos")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Tipo de Proyecto")
            project_type = st.selectbox(
                "Seleccione un tipo de proyecto",
                list(CONSTRUCTION_CONFIG["project_templates"].keys())
            )
        
        with col2:
            st.subheader("Secciones del Proyecto")
            sections = CONSTRUCTION_CONFIG["project_templates"][project_type]
            for section in sections:
                st.markdown(f"- {section}")
        
        st.markdown("---")
        
        # Bot√≥n para crear nuevo proyecto
        if st.button("Crear Nuevo Proyecto con esta Plantilla"):
            st.session_state.new_project_type = project_type
            st.session_state.new_project_sections = sections
            st.success(f"Plantilla de {project_type} seleccionada. Vaya a 'Nueva Cotizaci√≥n' para continuar.")
    
    elif pagina == "üìä Dashboard":
        create_dashboard_page(construction_config=CONSTRUCTION_CONFIG)
    
    elif pagina == "üìÖ Importar Precios":
        st.title("Importar Precios")
        
        st.header("Importar Lista de Precios para Construcci√≥n")
        
        uploaded_file = st.file_uploader("Seleccione un archivo Excel con precios", type=["xlsx", "xls"])
        
        if uploaded_file:
            try:
                df = pd.read_excel(uploaded_file)
                st.write("Vista previa de los datos:")
                st.dataframe(df.head())
                
                # Mapeo de columnas
                st.subheader("Mapeo de Columnas")
                
                col_description = st.selectbox("Columna de Descripci√≥n", df.columns.tolist())
                col_unit = st.selectbox("Columna de Unidad", df.columns.tolist())
                col_price = st.selectbox("Columna de Precio", df.columns.tolist())
                
                # Categor√≠a de construcci√≥n
                category = st.selectbox("Categor√≠a", CONSTRUCTION_CONFIG["categories"])
                
                if st.button("Importar Precios"):
                    with st.spinner("Importando precios..."):
                        # Aqu√≠ ir√≠a la l√≥gica para guardar en la base de datos
                        time.sleep(2)  # Simulaci√≥n
                        st.success(f"Se importaron {len(df)} precios correctamente")
            except Exception as e:
                st.error(f"Error al procesar el archivo: {str(e)}")
    
    elif pagina == "üìÉ Hist√≥rico de Precios":
        st.title("Hist√≥rico de Precios")
        
        # Filtros
        st.header("Filtros")
        
        col1, col2 = st.columns(2)
        
        with col1:
            category = st.selectbox("Categor√≠a", ["Todas"] + CONSTRUCTION_CONFIG["categories"])
        
        with col2:
            search = st.text_input("Buscar por descripci√≥n")
        
        # Aqu√≠ ir√≠a la l√≥gica para obtener y mostrar los precios
        st.info("Funcionalidad en desarrollo")
    
    elif pagina == "üìà An√°lisis de Presupuestos":
        create_budget_analysis_page()
    
    elif pagina == "‚öôÔ∏è Configuraci√≥n":
        create_settings_page(api_key_manager, construction_config=CONSTRUCTION_CONFIG)

if __name__ == "__main__":
    main()
